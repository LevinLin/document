1.jQuery.makeArray( obj )
  Description: 
  > Convert an array-like object into a true JavaScript array.
  > [obj] Type: PlainObject - Any object to turn into a native Array.
  > Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).
    Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.
  > [example]
    var obj = eval('(' + json + ')');
    var array = $.makeArray(obj.xxx);
    
2.jQuery.inArray( value, array [, fromIndex ] )
  > Description: Search for a specified value within an array and return its index (or -1 if not found).
  > [fromIndex] Type: Number - The index of the array at which to begin the search. The default is 0, which will search the whole array.
  > 如果数组第一个元素匹配value，$.inArray()返回0。因为JavaScript将0视为false(即 0 == false, 但是 0 !== false)，如果我们检查在array中存在value，我们只需要检查它是否不等于（或大于）-1
  > [example]
    $("input:checkbox[name='xxx']").each(function(){
        if (jQuery.inArray($(this).val(), array) > -1) {
            $(this).prop('checked', true);
        };
    });
    
3.jquery set checkbox checked
  > .prop( propertyName, value )
  > Description: Set one or more properties for the set of matched elements.
  > The .prop() method is a convenient way to set the value of properties—especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting selectedIndex, tagName, nodeName, nodeType, ownerDocument, defaultChecked, or defaultSelected. Since jQuery 1.6, these properties can no longer be set with the .attr() method. They do not have corresponding attributes and are only properties.
  > Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the value property of input elements, the disabled property of inputs and buttons, or the checked property of a checkbox. The .prop() method should be used to set disabled and checked instead of the .attr() method. The .val() method should be used for getting and setting value.
  > [example 1]
    $( "input" ).prop( "disabled", false );
    $( "input" ).prop( "checked", true );
    $( "input" ).val( "someValue" );
  > [example 2]
    $("input:checkbox[name='xxx']").each(function(){
        if (jQuery.inArray($(this).val(), array) > -1) {
            $(this).prop('checked', true);
        };
    });
   
4.dataTable.draw() vs. dataTable.destroy()(/destroy option)
  > [background infomation]
    1.there is a page consist of several filters and table for filtered result
    2.we need to get result based on filters and then generate the table
  > [solutions]
    (1) simplely use dataTable( option )
      var dataTable;
      $('#filterButton').on( 'click', function() {
        dataTable = $('#example').dataTable( {
          ...
          "ajax": {
            "url": "...",
            "type": "GET",
            "cache": false,
            "data": {         //refresh fiters while redraw table
              filter1:$('#filter1').val(),
              filter2:$('#filter2').val(),
              filter3:$('#filter3').val(),
              ...
            }
          },
        } );
      } );
      
      [problem] Warning: Cannot reinitialise DataTable
      [reason] DataTables has a wide range of configuration options which can be used to customise the table at initialisation time, 
      but only at initialisation time. After a DataTable has been initialised any attempt to use these options will result in an error.
   
    (2) use draw() to workaround the error depending on whether dataTable has been initialised or not
      var dataTable = null;
      $('#filterButton').on( 'click', function() {
        if( null != dataTable) {
          dataTable.draw( false );
        } else {
          dataTable = $('#example').dataTable( {
            ...
            "ajax": {
              "url": "...",
              "type": "GET",
              "cache": false,
              "data": {         //refresh fiters while redraw table
                filter1:$('#filter1').val(),
                filter2:$('#filter2').val(),
                filter3:$('#filter3').val(),
                ...
              }
            },
          } );
        }
      } );
      
      [problem] branch `else` will be executed only 1 time at very first initialization of table, 
      and branch `if` is executed from then on using draw() to renew table, unfortunately draw() is unable to catch the refreshed filters
      [reason] filters are outside of dataTable and not catched while changed
      
    (3) recreate a new dataTable everytime filters is changed & triggered
      var dataTable;
      $('#filterButton').on( 'click', function() {
        dataTable = $('#example').dataTable( {
          "destroy": true,    //notice here
          ...
          "ajax": {
            "url": "...",
            "type": "GET",
            "cache": false,
            "data": {         //refresh fiters while redraw table
              filter1:$('#filter1').val(),
              filter2:$('#filter2').val(),
              filter3:$('#filter3').val(),
              ...
            }
          },
        } );
      } );
      
      Problem resolved!!
      
      [reason]
        <1> DataTables provides a destroy() method to destroy an old table, so you would be able to initialise a new one in its place.
          For example:
          table = $('#example').DataTable( {
            paging: false
          } );
          table.destroy();
          table = $('#example').DataTable( {
            searching: false
          } );
          Note that paging will be enabled in the second initialisation here as it is a completely new DataTable,
          and paging is not explicitly disabled!
          
        <2> As a short-cut, like the `retrieve` option, there is also a `destroy` option that can be used to DataTables to destroy the existing table. 
        <3> if it is essential for you to be able to dynamically enable and disable features, the destroy option can be used, 
        noting the performance impact that this will have.
  > [references]
    (1) dataTable.draw()
        https://datatables.net/reference/api/draw()
    (2) dataTable.destroy()
        http://datatables.net/manual/tech-notes/3
  
5.initialize the font color of the initial value of input using CSS
    <style>
        input[type="text"] {color:grey}
        input[type="text"]:focus {color:black}
    </style>

6.change sAjaxSource of dataTable dynamicly
  > oTable.fnSettings().sAjaxSource='{your new url}';
  > oTable.fnDraw();

7.usage of bootstrap tooltip
  reference: http://stackoverflow.com/questions/20545745/bootstrap-tooltip-not-showing-up
             http://stackoverflow.com/questions/9958825/how-do-i-bind-twitter-bootstrap-tooltips-to-dynamically-created-elements
  [1] add attributes to element
  data-toggle='tooltip' data-placement='bottom' title='...'
  for example:
  <button data-toggle='tooltip' data-placement='bottom' title='...' onclick='...'>...</button>
  [2] enable and initialize tooltip
  $(document).ready(function(){
      ...
      // enable tooltip
      $(function(){
          $('body').tooltip({ selector: '[data-toggle="tooltip"]' });
      });
  });
  
8.use .each() to access array/object items
  $.each(obj,function(key,value) { 
    var html = "...";
    $("#targetdiv").append(html);  
  });

9.initialize dataTable 
  > http://datatables.club/manual/api.html
  一个datatables实例可以通过下面三个方法实现:
  $( selector ).DataTable();
  $( selector ).dataTable().api();
  new $.fn.dataTable.Api( selector );
  主要是要注意$( selector ).DataTable()与$( selector ).dataTable()两者之间的区别.前者返回一个datatable中API实例,而后者返回一个jQuery对象.一个api()方法添加到jQuery对象,这样你可以很轻松地访问API. 但是jQuery对象可以用于操纵表节点,与任何其他jQuery实例一样(像addClass()).

10.dataTable row selector
  > https://datatables.net/reference/type/row-selector
  > by index (integer) - DataTables stores each row internally with a row index
  > by #ID   (string)
  > by node  (DOM elements) -  This can be useful for getting data from a row, or performing other row based operations, when you have only the DOM node for reference
    > example: <a></a> element in <td></td> in <tr>
      $('a[name="btn_email"]').each(function(){
        $(this).click(function(){
          var obj = currentTbl.api().row($(this).parent().parent()).data();
          ...
        });
      });
11.convert string to number
  > Number("3.14")    // 返回 3.14
  > Number(" ")       // 返回 0 
  > Number("")        // 返回 0
  > Number("99 88")   // 返回 NaN
  
12.set element to display or not
  > $("#id").css('display','none'); 
  > $("#id").show(); 
  
13.dynamically add/remove element of same type
  > link: http://jsfiddle.net/aaki/hMJEy/1/
  > real example:
    HTML:
    <div id="multi-field-wrapper" class="form-group form-group-sm" style="display:none">
        <label class="col-sm-3 control-label">UIDs:</label>
        <div id="multi-fields" class="col-sm-9">
            <div class="multi-field">
                <input type="text" style="width:30%;" class="form-control" id="uids0" name='uids[]' placeholder="enter uid">
                <a href="#" class="remove-field">Remove</a>
            </div>   
        </div>
            
        <div class="col-sm-3"></div>
        <div class="col-sm-9"><a href="#" class="add-field">Add UID</a></div>
    </div>
    
    JS:
    (1) bind click action
    var counter=1;
    $('#multi-field-wrapper').each(function() {
        var $wrapper = $('#multi-fields', this);
        $(".add-field", $(this)).click(function(e) {
            $('.multi-field:first-child', $wrapper).clone(true).appendTo($wrapper).find('input').attr("id","uids"+counter).val('').focus().parent('.multi-field').find('a').show();         
            counter++;
        });
        $('.multi-field .remove-field', $wrapper).click(function() {
            if ($('.multi-field', $wrapper).length > 1) {
                if ($(this).parent('.multi-field').find('input').attr("id") != "uids0") {
                    $(this).parent('.multi-field').remove();
                } else {
                    var val_to_keep = new Array();
                    var last_field_id = 1;
                    var tmp = '';
                    var field_id = '';
                    var index = 0;
                    $(".multi-field").each(function() {
                        field_id = $(this).find('input').attr("id");
                        if (field_id != "uids0") {
                            val_to_keep.push($(this).find('input').val());
                            tmp = field_id.split("uids");
                            if (Number(tmp[1]) > last_field_id) {
                                last_field_id = Number(tmp[1]);
                            }
                        }
                    });

                    $(".multi-field").each(function() {
                        if ($(this).find('input').attr("id") == "uids"+last_field_id) {
                            $(this).remove();
                        } else {
                            $(this).find('input').val(val_to_keep[index]);
                            index++;
                        }
                    });
                }
            }
        });
    });
    (2) render elements using data from server
    //arrayUID is data from server
    $('#uids0').val(arrayUID[0]);
    var len = arrayUID.length;
    //remove elements except the 1st one
    if ($('.multi-field').length > 1) {
        $(".multi-field").each(function() {
            if ($(this).find('input').attr("id") != "uids0") {
                $(this).remove();
            }
        });
    }
    //dynamically add elements according to data by coloning first element
    if(len > 1) {
        for (var i = 1; i < len; i++) {
            $('.multi-field:first-child').clone(true).appendTo('#multi-fields').find('input').attr("id","uids"+i).val(arrayUID[i]).focus().parent('.multi-field').find('a').show();   
        };
    }
    counter=len;
    
14.replace()
  > var a = "a,b,d,f,g,s";a = a.replace("b,", "");
  
15.bootstrap iswitch
  > LINK
  http://www.bootcss.com/p/bootstrap-switch/
  
  > HTML
  <input name="switch"  type="checkbox"  rpid="xxx" />
  
  > JS
  <link rel="stylesheet" href="path/to/css/bootstrap-switch.min.css">
  <script type="text/javascript" src="path/to/js/bootstrap-switch.js"></script>
  
  //initialization
  function iniSwitch(){
    $('[name="switch"]').bootstrapSwitch({
        size:'mini',
        onText:'YES',
        onColor:'success',
        offText:'NO'
    });
    $("[class^='bootstrap-switch']").bind("click",function(event){
        event.stopPropagation();
    });

    $('[name="switch"]').on('switchChange.bootstrapSwitch', function(event, value) {
        var rpid=$(this).attr('rpid');
        $(this).bootstrapSwitch('toggleReadonly');
        var obj=$(this);
        $(this).parent().parent().parent().append('<span name="loading" class="glyphicon glyphicon-refresh glyphicon-refresh-animate"></span>');

        $.post('http://something/to/request/value', {}, function(data){
            if(data.error){
                alert(data.error);
            }else{
                obj.bootstrapSwitch('toggleReadonly');
                obj.parent().parent().parent().find('[name="loading"]').remove();
                tbl_role.fnDraw();
            }
        },'json');
    });
  }
16.go to tab by clicking or hyperlink
  [solution 1]
  > <ul  class="nav nav-tabs">
        <li class="active"><a href="#tab_1" data-toggle="tab">TAB 1</a></li>
        <li><a href="#tab_2" data-toggle="tab">TAB 2</a></li>
        <li><a href="#tab_3" data-toggle="tab">TAB 3</a></li>
    </ul>
    
    <script>
        $(document).ready(function(){
            //switch between tabs and change url by clicking
            $('.nav-tabs a').click(function (e) {
    		        $(this).tab('show');
    		        var scrollmem = $('body').scrollTop();
    		        window.location.hash = this.hash;
    		        $('html,body').scrollTop(scrollmem);
  		      });

            //show correct tab by hyperlink with anchor(#)
            //by this
            if(window.location.hash != "") {
      		      $('a[href="' + window.location.hash + '"]').click()
  		      }
            //or by this
            //var hash = window.location.hash;
            //hash && $('ul.nav a[href="' + hash + '"]').tab('show');
        });
    </script>
    
    NOTICE: this works, but fails when using back/forward buttons
  
  [solution 2]
  just one line is needed if using jquery.stickytabs.js from: 
  http://www.aidanlister.com/2014/03/persisting-the-tab-state-in-bootstrap/
  > <script src="js/jquery.stickytabs.js"></script>
    <script>
        $(document).ready(function(){
  		      $('.nav-tabs').stickyTabs();
        });
    </script>
  > code of jquery.stickytabs.js
    /**
     * jQuery Plugin: Sticky Tabs
     *
     * @author Aidan Lister <aidan@php.net>
     * @version 1.2.0
     */
    (function ( $ ) {
        $.fn.stickyTabs = function( options ) {
            var context = this

            var settings = $.extend({
                getHashCallback: function(hash, btn) { return hash },
                selectorAttribute: "href",
                backToTop: false,
                initialTab: $('li.active > a', context)
            }, options );

            // Show the tab corresponding with the hash in the URL, or the first tab.
            var showTabFromHash = function() {
                var hash = settings.selectorAttribute == "href" ? window.location.hash : window.location.hash.substring(1);
                if (hash != '') {
                    var selector = hash ? 'a[' + settings.selectorAttribute +'="' + hash + '"]' : settings.initialTab;
                    $(selector, context).tab('show');
                    setTimeout(backToTop, 1);
                }
            }

            // We use pushState if it's available so the page won't jump, otherwise a shim.
            var changeHash = function(hash) {
                if (history && history.pushState) {
                    history.pushState(null, null, window.location.pathname + window.location.search + '#' + hash);
                } else {
                    scrollV = document.body.scrollTop;
                    scrollH = document.body.scrollLeft;
                    window.location.hash = hash;
                    document.body.scrollTop = scrollV;
                    document.body.scrollLeft = scrollH;
                }
            }

            var backToTop = function() {
                if (settings.backToTop === true) {
                    window.scrollTo(0, 0);
                }
            }

            // Set the correct tab when the page loads
            showTabFromHash();

            // Set the correct tab when a user uses their back/forward button
            $(window).on('hashchange', showTabFromHash);

            // Change the URL when tabs are clicked
            $('a', context).on('click', function(e) {
                var hash = this.href.split('#')[1];
                if (typeof hash != 'undefined' && hash != '') {
                    var adjustedhash = settings.getHashCallback(hash, this);
                    changeHash(adjustedhash);
                    setTimeout(backToTop, 1);
                }
            });
            return this;
        };
    }( jQuery ));
    
  [note]
  in case that tab-pane activation doesn't work properly, add these logic:
  $(document).ready(function(){
      ...
      $('.nav-tabs a').click(function (e) {
          $(this).tab('show');
          var scrollmem = $('body').scrollTop();
          window.location.hash = this.hash;

          // tab-pane doesn't work, so we hack it here
          $('.tab-pane.active').removeClass('active');
          $(this.hash + '.tab-pane').addClass('active');

          $('html,body').scrollTop(scrollmem);
      });
      ...
  });
  
17. render select options
    $("#select_id option").each(function(){ 
        $(this).prop('selected', false); 
    });
    $('#select_id option[value="'+option_value_needed+'"]').prop('selected','true');
    
18. Making wide table fit bootstrap container
    add this:
    
    table {
        table-layout: fixed;
        word-wrap: break-word;
    }
    
19. dataTable specify table column with fixed width
    "aoColumns": [ { "sWidth": "20%" }, ...]
