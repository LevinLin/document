1.install go env on Mac

> brew install go
> vi /Users/levin.lin/.bash_profile
  # for golang
  export PATH="/usr/local/Cellar/go/1.4.2/bin:$PATH"
  export GOPATH="$HOME/GoRoot/go"
  export GOROOT="/usr/local/Cellar/go/1.4.2/libexec"
  export GOBIN="$GOPATH/bin"
  export PATH="$GOBIN:$PATH"
> go env
  GOARCH="amd64"
  GOBIN="/Users/levin.lin/GoRoot/go/bin"
  GOCHAR="6"
  GOEXE=""
  GOHOSTARCH="amd64"
  GOHOSTOS="darwin"
  GOOS="darwin"
  GOPATH="/Users/levin.lin/GoRoot/go"
  GORACE=""
  GOROOT="/usr/local/Cellar/go/1.4.2/libexec"
  GOTOOLDIR="/usr/local/Cellar/go/1.4.2/libexec/pkg/tool/darwin_amd64"
  CC="clang"
  GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common"
  CXX="clang++"
  CGO_ENABLED="1"

2.goroutine
> 在Go語言中，每一個併髮的執行單元叫作一個goroutine
> 當一個程序啓動時，其主函數卽在一個單獨的goroutine中運行，我們叫它main goroutine。新的goroutine會用go語句來創建。在語法上，go語句是一個普通的函數或方法調用前加上關鍵字go。go語句會使其語句中的函數在一個新創建的goroutine中運行。而go語句本身會迅速地完成。
  f()    // call f(); wait for it to return
  go f() // create a new goroutine that calls f(); don't wait
> 當主函數返迴時，所有的goroutine都會直接打斷，程序退齣。除了從主函數退齣或者直接退齣程序之外，沒有其它的編程方法能夠讓一個goroutine來打斷另一個的執行，可以通過goroutine之間的通信來讓一個goroutine請求請求其它的goroutine，併讓其自己結束執行。
> goroutine和綫程的本質區彆
